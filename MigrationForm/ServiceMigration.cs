
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static MigrationForm.ServiceMigration;

namespace MigrationForm
{
    public class ServiceMigration
    {
        static List<string> unmatchPaxCountServiceList = new List<string>() { "1059775", "1059497", "1059482", "1059472", "1059204", "1059000", "1058876", "1058490", "1058152", "1058114",
            "1057110", "1056464", "1056463", "1056462", "1055929", "1055927", "1055926", "1055190", "1054992", "1054983",
            "1054973", "1054827", "1054662", "1054284", "1053930", "1053304", "1053000", "1052873", "1052447", "1052424",
            "1051792", "1051011", "1051006", "1050890", "1050595", "1050046", "1049786", "1048627", "1048623", "1048080",
            "1048077", "1048075", "1047936", "1047866", "1047864", "1047863", "1047794", "1047793", "1047789", "1047784",
            "1047552", "1047374", "1047338", "1047337", "1047336", "1046339", "1046026", "1045942", "1045701", "1043336",
            "1043334", "1043143", "1043139", "1043133", "1041931", "1041930", "1041708", "1041665", "1040340", "1040331",
            "1040328", "1040267", "1039631", "1039144", "1037601", "1036913", "1036261", "1036259", "1035400", "1034845",
            "1034681", "1034680", "1033726", "1033521", "1033449", "1033253", "1033250", "1032542", "1032540", "1032379",
            "1031938", "1031935", "1031430", "1031267", "1030180", "1029725", "1029711", "1029574", "1029058", "1028875",
            "1028874", "1028873", "1028872", "1028870", "1028869", "1028618", "1028561", "1028109", "1028052", "1027978",
            "1027887", "1027607", "1026701", "1026697", "1026651", "1026134", "1025832", "1025467", "1025208", "1024383",
            "1024382", "1024380", "1024377", "1024143", "1024077", "1024074", "1024071", "1023419", "1022968", "1022966",
            "1022401", "1022386", "1022188", "1022129", "1022121", "1021930", "1021911", "1021579", "1021575", "1021572",
            "1021317", "1021268", "1021266", "1020977", "1020956", "1020147", "1020090", "1019827", "1019655", "1019632",
            "1019628", "1019470", "1018974", "1018619", "1018490", "1018130", "1018067", "1017888", "1017865", "1017570",
            "1017569", "1017423", "1017049", "1017048", "1016749", "1016681", "1016675", "1015873", "1015312", "1015308",
            "1014305", "1014304", "1013737", "1013735", "1013734", "1013686", "1013628", "1013294", "1013152", "1013149",
            "1012739", "1012510", "1012320", "1012312", "1012307", "1011780", "1011578", "1011521", "1011516", "1011276",
            "1011225", "1011224", "1011223", "1010710", "1010175", "1009528", "1008719", "1007981", "1006725", "1006721",
            "1005806", "1005779", "1005775", "1005277", "1005273", "1005270", "1005019", "1004844", "1004789", "1003600",
            "1003599", "1003598", "1002872", "1002871", "1002870", "1002868", "1002867", "1002866", "1002634", "1002064",
            "1002026", "1001444", "1001394", "1001356", "1001192", "1000555", "1000553", "1000550", "1000310", "1000308",
            "1000305", "1000303", "1000300", "1000299", "1000297", "1000294", "1000040", "1000022", "999979", "999699",
            "999020", "999019", "999018", "998901", "998849", "998457", "998220", "998217", "998042", "998006", "997560",
            "997556", "996951", "996947", "996946", "996921", "996669", "996667", "996666", "996664", "996661", "996658",
            "996655", "996652", "995822", "995245", "995244", "994924", "994905", "994884", "994832", "993903", "993901",
            "993847", "992619", "992362", "992354", "991323", "991322", "991321", "991320", "991319", "991010", "991009",
            "990908", "990506", "990326", "990229", "990010", "989571", "989568", "989562", "989560", "989517", "989030",
            "988397", "988313", "987668", "987130", "987128", "987127", "987126", "986565", "986561", "986044", "985787",
            "985786", "984959", "984925", "984915", "984914", "984384", "983830", "983799", "983792", "983584", "983142",
            "982638", "982471", "982154", "981701", "981439", "981431", "981339", "981317", "981313", "981309", "981305",
            "981301", "980130", "980025", "979919", "979790", "979775", "979768", "979765", "979764", "979397", "979045",
            "979003", "978999", "978998", "978358", "978329", "978026", "978022", "978015", "977997", "977013", "977012",
            "976922", "976909", "976735", "976686", "976658", "975675", "975493", "975203", "975089", "974825", "974821",
            "974820", "974488", "974464", "974404", "974331", "974200", "974191", "974190", "974140", "974100", "973785",
            "973262", "973247", "973237", "972935", "972923", "972201", "972078", "971697", "971696", "971607", "971256",
            "971058", "970077", "969760", "969526", "968493", "968412", "967255", "966633", "966632", "965091", "964671",
            "964663", "964422", "963992", "962277", "961225", "960644", "960376", "960375", "960133", "959874", "959872",
            "959858", "959452", "959297", "958763", "957840", "957645", "957227", "955817", "955382", "955368", "954917", "954906", "954837", "954835", "954834", "954832", "954831", "954830", "954829",
            "954828", "954270", "953684", "953654", "952275", "951768", "951481", "951136", "950925", "950516",
            "950485", "950478", "950470", "949906", "949904", "949861", "949242", "949240", "948863", "948066",
            "947785", "947784", "947339", "946876", "945438", "944597", "944363", "944137", "943572", "943565",
            "943558", "943548", "943539", "942686", "942617", "941924", "941921", "941195", "941194", "940881",
            "940872", "940860", "940856", "940693", "940473", "940472", "938612", "938606", "938310", "937846",
            "937728", "937500", "937026", "937024", "935715", "933907", "933475", "933098", "932719", "932083",
            "931875", "931725", "931408", "931249", "931240", "930991", "929969", "929968", "929967", "929130",
            "928518", "928349", "927502", "927501", "927500", "927499", "927498", "927497", "927496", "927495",
            "927494", "927493", "927492", "927491", "927490", "927489", "927488", "927487", "927486", "927485",
            "927484", "927483", "927482", "927481", "927480", "927479", "927478", "927477", "927476", "927475",
            "927474", "927473", "927472", "927471", "927470", "927469", "927468", "927467", "927466", "927465",
            "927464", "927462", "926600", "925656", "925644", "925321", "925114", "924807", "924030", "924029",
            "923693", "923412", "923160", "923159", "920750", "920747", "919200", "918271", "918269", "917162",
            "917137", "917096", "916756", "916692", "916471", "916470", "916341", "915884", "915243", "913940",
            "913516", "913513", "912312", "911870", "911867", "909920", "909901", "909624", "908873", "908854",
            "908851", "907827", "906425", "905015", "904730", "904696", "902348", "901402", "900357", "900310",
            "899466", "899253", "899099", "895905", "894670", "892640", "892623", "892474", "892469", "892126",
            "892123", "890456", "890455", "890452", "890432", "890335", "888443", "888097", "887688", "887391",
            "887266", "887105", "885047", "881925", "879643", "879579", "879348", "878751", "876453", "876338",
            "875883", "873134", "872894", "871271", "870442", "870338", "869380", "869376", "869372", "868602",
            "867255", "866990", "866432", "865181", "864852", "864713", "863972", "863968", "863946", "863886",
            "863546", "863543", "863532", "863526", "863369", "863128", "862366", "860649", "859460", "859459",
            "859458", "859457", "859276", "859175", "859172", "859086", "859078", "858580", "858577", "858218",
            "857047", "856350", "855378", "855353", "855309", "854685", "853577", "851838", "850824", "848490",
            "848190", "847161", "846523", "846522", "846519", "846499", "843375", "843270", "842267", "842264",
            "842261", "841674", "839840", "839048", "837294", "837278", "833674", "833624", "832521", "828511",
            "827750", "827339", "823965", "818706", "818705", "818241", "816092", "816081", "816080", "800276",
            "799742", "797901", "797898", "787169", "786409", "786405", "785941", "784574", "784571", "784559",
            "784556", "784553", "784550", "784276", "784212", "784153", "782521", "782459", "782452", "782451",
            "781174", "781090", "775247", "772383", "771982", "769637", "767599", "767270", "767217", "767215",
            "766833", "766661", "766511", "766336", "766139", "766104", "765646", "763891", "761610", "761601",
            "761599", "761585", "761318", "761290", "759883", "759458", "758814", "757853", "756900", "756578",
            "752942", "752541", "751418", "749417", "748981", "746138", "745755", "745650", "745648", "745644",
            "745642", "745638", "745636", "745632", "745630", "744318", "744053", "743580", "743556", "743550",
            "742307", "742305", "742039", "742031", "740899", "740751", "739316", "737041", "736996", "736881",
            "736874", "736546", "735781", "734114", "734064", "733845", "732743", "732415", "731989", "731974",
            "729839", "729442", "728537", "727532", "727529", "727411", "720554", "720550", "712065", "709767",
            "705560", "705559", "705545", "694588", "688639", "677874", "675534", "656571", "647242", "642951",
            "639198", "634846", "632099", "625849", "625824", "625819", "618459", "611972", "607386", "604010",
            "603562", "603150", "603146", "603144", "603040", "602265", "601928", "600932", "598738", "597722",
            "596744", "596537", "596414", "595975", "594363", "588440", "588421", "583636", "581420", "581032",
            "580335", "580332", "580328", "580322", "580127", "580125", "580123", "580014", "579920", "578942",
            "578933", "578666", "578664", "573456", "572774", "572731", "572729", "572605", "572190", "571539",
            "569611", "569596", "569055", "569053", "569048", "568754", "568658", "568146", "568121", "568119",
            "565263", "565053", "562601", "562309", "562307", "562305", "562139", "561332", "561042", "561039",
            "560810", "560739", "560568", "560207", "560198", "560185", "559292", "558486", "558398", "558037",
            "558033", "557994", "557822", "557808", "557303", "556584", "556575", "556500", "556497", "556493",
            "555979", "555678", "555453", "554484", "554244", "554239", "554220", "552320", "552079", "552052",
            "551056", "551032", "550682", "550666", "550162", "549820", "549793", "549751", "549120", "549075", "549065", "548754", "548667", "548665", "548658", "548652", "546957", "546399", "546328", "546165",
    "546150", "545511", "545349", "544582", "544345", "543890", "543867", "543173", "542464", "542362",
    "542358", "542309", "541545", "541461", "541327", "541035", "541003", "540402", "540400", "540332",
    "540324", "540322", "540196", "539867", "539621", "539619", "539617", "539361", "539230", "539183",
    "538737", "538607", "538218", "538127", "537388", "536343", "535009", "534996", "534218", "534061",
    "533017", "532939", "532474", "532370", "532364", "532022", "531983", "531677", "531393", "529856",
    "529686", "529384", "528844", "528802", "528637", "528635", "528633", "527953", "527443", "527428",
    "527425", "526725", "526694", "526691", "526435", "526209", "524227", "523999", "523997", "523948",
    "523108", "522789", "522670", "522453", "522155", "522151", "521883", "519153", "517290", "516733",
    "516729", "515822", "515820", "515704", "515541", "514031", "512701", "507632", "507444", "507442",
    "505646", "504186", "503447", "503229", "503225", "503223", "502971", "502156", "502071", "502065",
    "502062", "500756", "500163", "499622", "497013", "496967", "496597", "496579", "494016", "493853",
    "493371", "493101", "492856", "492120", "491577", "491497", "491074", "490318", "490154", "490149",
    "490144", "489590", "489350", "489345", "488873", "488421", "487860", "487705", "487554", "487447",
    "487438", "487434", "487061", "487058", "486960", "486666", "486475", "486168", "485900", "485882",
    "485878", "485527", "484520", "484385", "483872", "483854", "483642", "483599", "482949", "482427",
    "482149", "482003", "481677", "481265", "481040", "480536", "480525", "480400", "480396", "480244",
    "479803", "479562", "479281", "479263", "479057", "479055", "478895", "478892", "478804", "478761",
    "478680", "478478", "478412", "478304", "478175", "477308", "477223", "477025", "476698", "476491",
    "476076", "476013", "475854", "475826", "475814", "475809", "475555", "475311", "475293", "474637",
    "474632", "474627", "474623", "474503", "474144", "473728", "473683", "473664", "472275", "472229",
    "472112", "472110", "472008", "471994", "471962", "471033", "471028", "470628", "470427", "469766",
    "469338", "468375", "468369", "468166", "468129", "467654", "467650", "467543", "465705", "464884",
    "464881", "464065", "463580", "463276", "463270", "461925", "460638", "460060", "459960", "459949",
    "458853", "458140", "458060", "458056", "458053", "458048", "457307", "457305", "456065", "455669",
    "455651", "455647", "455532", "455530", "455523", "454242", "453251", "453116", "452842", "452832",
    "452443", "451927", "450842", "450771", "450524", "450491", "449991", "449985", "449756", "449292",
    "449284", "448794", "448451", "448260", "448258", "447232", "447229", "447206", "447160", "446683",
    "446012", "446003", "445997", "445775", "445461", "444910", "444163", "444156", "443597", "443537",
    "442762", "442699", "442329", "442319", "442317", "442034", "441997", "441937", "441921", "441643",
    "441457", "440316", "439961", "439917", "439529", "438585", "438476", "438387", "437045", "436031",
    "436000", "435193", "435119", "434933", "434929", "434421", "433974", "433965", "433963", "433961",
    "433957", "433783", "433724", "433586", "433576", "433072", "432109", "432107", "431149", "430596",
    "430535", "430079", "430076", "429833", "429814", "429320", "429318", "429316", "429314", "429312",
    "429170", "428526", "428520", "428506", "428021", "427916", "427908", "426632", "426624", "426207",
    "426134", "425449", "424977", "424338", "424236", "423675", "423608", "423604", "423370", "423262",
    "423260", "423205", "423203", "422910", "422908", "422904", "422901", "422680", "422497", "422412",
    "422409", "421606", "421604", "421459", "421037", "420983", "420689", "420486", "420445", "420443",
    "420165", "419912", "419908", "419723", "419697", "419692", "419681", "419669", "419574", "419374",
    "419348", "419152", "418877", "418578", "418560", "418544", "418519", "418510", "418205", "418177",
    "418104", "418007", "417517", "417451", "417441", "417258", "417239", "417140", "416340", "416190",
    "416178", "416156", "416084", "416053", "415733", "415358", "414716", "414686", "414571", "414556",
    "414504", "414484", "414318", "414296", "414198", "414148", "412509", "412506", "412452", "412440",
    "412392", "412241", "412061", "412017", "412008", "411946", "411584", "411462", "411248", "411139",
    "411042", "410910", "410746", "410742", "410708", "410677", "410616", "410336", "409508", "409504",
    "409406", "409327", "409323", "409320", "409134", "408955", "408473", "408470", "408331", "407911",
    "407909", "407548", "407022", "407020", "406199", "405880", "405497", "404738", "404655", "404446",
    "404226", "404023", "404002", "404000", "403709", "403351", "403322", "402665", "402489", "402348",
    "401668", "401665", "401628", "400850", "400667", "400664", "400608", "400275", "399685", "399656",
    "398901", "398278", "397850", "397356", "397193", "397081", "396389", "396378", "396256", "396251",
    "395904", "395778", "395659", "395609", "395600", "395595", "395417", "395221", "395199", "395197",
    "395195", "394738", "392597", "392435", "391560", "391556", "391415", "391413", "389581", "389393", "388785", "388529", "388524", "388518", "388153", "386744", "385725", "385665", "384715", "384713",
            "384710", "384403", "384074", "383951", "383937", "383545", "383541", "382687", "382672", "382652",
            "382518", "382007", "381508", "380303", "378327", "378325", "378322", "377562", "376045", "375686",
            "371425", "370228", "370222", "370073", "370066", "369775", "368754", "367556", "367553", "366486",
            "366468", "366421", "365394", "363121", "363030", "362455", "362426", "362421", "362397", "362384",
            "362231", "362229", "361502", "360660", "359418", "359370", "359358", "359160", "359150", "358043",
            "357208", "357115", "356905", "356903", "356900", "356875", "356872", "356852", "356849", "356840",
            "356795", "356415", "355860", "355818", "355085", "354829", "354045", "353994", "353661", "353337",
            "352614", "352609", "352599", "352456", "352343", "351195", "351175", "350562", "350560", "349954",
            "348702", "348582", "348272", "347134", "347010", "346981", "345904", "345831", "345322", "344050",
            "343855", "343801", "343797", "343792", "343486", "343120", "342576", "342457", "342147", "341873",
            "341861", "341509", "340949", "340433", "340133", "339645", "339629", "339324", "339321", "338077",
            "337433", "337220", "337212", "337206", "336785", "336545", "336435", "336408", "336327", "336318",
            "336259", "336119", "336097", "335585", "335498", "335422", "335289", "335281", "335272", "335264",
            "335018", "334598", "333723", "333719", "333716", "333615", "333601", "333597", "333392", "330534",
            "329416", "329294", "329264", "328844", "328786", "328528", "327501", "327053", "327048", "327046",
            "327037", "326429", "326357", "326345", "326333", "326135", "325819", "325172", "325161", "325098",
            "324899", "324035", "323733", "323112", "323110", "323105", "323082", "321971", "320532", "320259",
            "320068", "320003", "319943", "319921", "319258", "318574", "317812", "316662", "314914", "314708",
            "314700", "313456", "312594", "311840", "311384", "311379", "309022", "308598", "308593", "308587",
            "308581", "308119", "308116", "307804", "306751", "306742", "306736", "306315", "305474", "303493",
            "303487", "302787", "302784", "302421", "302338", "302323", "302017", "301932", "301024", "299786",
            "299555", "299294", "299289", "298636", "298087", "297708", "297054", "295083", "294052", "294045",
            "294043", "294041", "290600", "290594", "290221", "289752", "289750", "289721", "288196", "288152",
            "288091", "287283", "287196", "286720", "286164", "285901", "285456", "285448", "284530", "284528",
            "284523", "283872", "283870", "283868", "282272", "282270", "282246", "281889", "280961", "280622",
            "280439", "280410", "280047", "279824", "279819", "279472", "279219", "279217", "279213", "279207",
            "279121", "278726", "278593", "278363", "278361", "278359", "278357", "278347", "278345", "278185",
            "278124", "277720", "277709", "277680", "277653", "277366", "277200", "276874", "276338", "276258",
            "276080", "276068", "275834", "275336", "275173", "275166", "274920", "274214", "274186", "273944",
            "273884", "273549", "272903", "272859", "272856", "272851", "272358", "272351", "272347", "272338",
            "272299", "271406", "270939", "270902", "270742", "270718", "270710", "270281", "270016", "268826",
            "267969", "267847", "267244", "267237", "267054", "266998", "266996", "266843", "266837", "266815",
            "266105", "266103", "265085", "265025", "264992", "264681", "264637", "264631", "264318", "264186",
            "264051", "264021", "264019", "263835", "263055", "262624", "261848", "261842", "261152", "260810",
            "260572", "260522", "260516", "260514", "260130", "260058", "259916", "259841", "258654", "258216",
            "258168", "258166", "258015", "257794", "257673", "256785", "256061", "256051", "255328", "254999",
            "254993", "253295", "253272", "253264", "252760", "252241", "252239", "252237", "251413", "250879",
            "250123", "250112", "249438", "249432", "249260", "248935", "248110", "247661", "247537", "247424",
            "247317", "247311", "247266", "246503", "244676", "244672", "244235", "244233", "243460", "243458",
            "242561", "239172", "238680", "235708", "235354", "234977", "233516", "232591", "232060", "231252",
            "231250", "230883", "230876", "230853", "229850", "228729", "228727", "228725", "227868", "227488",
            "227446", "227334", "227216", "227009", "227007", "227003", "225938", "224407", "224190", "223620",
            "220321", "219787", "218407", "217989", "217609", "216389", "216360", "216354", "216024", "215960",
            "215129", "212677", "212376", "211229", "210054", "210050", "210048", "209977", "209891", "209672",
            "209516", "209505", "209497", "209493", "209145", "209111", "207911", "207899", "207897", "207891",
            "207851", "207564", "207454", "207379", "207347", "207276", "206930", "206881", "206853", "206692",
            "206560", "206555", "206549", "206541", "206538", "206432", "206426", "206363", "206360", "205607",
            "205577", "205575", "205489", "205204", "205196", "205077", "204856", "204465", "204237", "204162",
            "203907", "203905", "203882", "203761", "203730", "202931", "202929", "202735", "202726", "202719",
            "202447", "202441", "202037", "201900", "201424", "201418", "200593", "200489", "199896", "199861",
            "199191", "198710", "198512", "198165", "198070", "198043", "197831", "196957", "196923", "196907",
            "196823", "196509", "196501", "196495", "196490", "196486", "195835", "195635", "195470", "195466",
            "195460", "195451", "195447", "195228", "195201", "194821", "194817", "194630", "194487", "194483",
            "194479", "193956", "193599", "192748", "192420", "192281", "192261", "191922", "191879", "191872",
            "191808", "191458", "191309", "191196", "187888", "187796", "185329", "185056", "184942", "184363",
            "183195", "183192", "183172", "182644", "182612", "182387", "181051", "181042", "180197", "179830",
            "179817", "179412", "178466", "178464", "178275", "177221", "176602", "176596", "176093", "175549",
            "175534", "175337", "175319", "173951", "171588", "171182", "169838", "167498", "167491", "166275",
            "160001", "159912", "159908"};
        static List<string> roomlessServiceList = new List<string>() { "1059747", "1059683", "1059319", "1058769", "1058766", "1058593", "1058340", "1058320", "1058242", "1058193",
    "1058122", "1058117", "1058060", "1058059", "1057730", "1057720", "1057662", "1057511", "1057488", "1057404",
    "1056968", "1056967", "1056966", "1056921", "1056865", "1056800", "1056621", "1056616", "1056578", "1056547",
    "1056456", "1056014", "1055934", "1055636", "1055634", "1055300", "1055294", "1055262", "1055215", "1054994",
    "1054985", "1054976", "1054872", "1054871", "1054114", "1053601", "1053420", "1053418", "1053341", "1052943",
    "1052725", "1052455", "1052341", "1052273", "1051234", "1051166", "1050941", "1049865", "1049482", "1049449",
    "1049441", "1049431", "1048366", "1048363", "1048361", "1047814", "1047619", "1047593", "1047266", "1047262",
    "1047246", "1047100", "1047034", "1047019", "1046555", "1046550", "1046445", "1046260", "1046230", "1046022",
    "1045310", "1044181", "1044128", "1044038", "1043969", "1043864", "1043615", "1043392", "1043352", "1042769",
    "1042703", "1042702", "1042656", "1042520", "1042505", "1042251", "1041872", "1041664", "1041590", "1041452",
    "1041297", "1041291", "1040691", "1040672", "1040668", "1040562", "1040561", "1040221", "1040209", "1040114",
    "1039596", "1038296", "1037776", "1037742", "1037546", "1037367", "1037055", "1036956", "1036951", "1036847",
    "1036773", "1036771", "1036526", "1036486", "1036168", "1036027", "1035556", "1035312", "1035306", "1034986",
    "1034957", "1034758", "1034752", "1034475", "1034471", "1034404", "1033714", "1033694", "1033149", "1032549",
    "1031504", "1031281", "1031280", "1031124", "1031108", "1030954", "1030817", "1030678", "1030592", "1030585",
    "1030364", "1030353", "1029770", "1029717", "1029444", "1029214", "1029200", "1029187", "1029176", "1029163",
    "1029102", "1028982", "1028906", "1028877", "1028867", "1028769", "1028502", "1028428", "1028388", "1027916",
    "1027892", "1027836", "1027395", "1026929", "1026707", "1026649", "1026648", "1026414", "1026391", "1026243",
    "1026242", "1025831", "1025497", "1025272", "1025247", "1025245", "1025230", "1024938", "1024725", "1024474",
    "1024209", "1024202", "1024163", "1024066", "1024063", "1023961", "1023815", "1023794", "1023668", "1023602",
    "1023527", "1023525", "1023219", "1023186", "1023076", "1022983", "1022896", "1022664", "1022663", "1022455",
    "1022454", "1022397", "1022370", "1022158", "1021925", "1021827", "1021821", "1021720", "1021651", "1021436",
    "1021433", "1021430", "1021202", "1020998", "1020981", "1020588", "1020585", "1020576", "1020480", "1020081",
    "1019648", "1019609", "1019245", "1019236", "1019200", "1019108", "1019029", "1018713", "1018544", "1018541",
    "1018506", "1018116", "1017919", "1017677", "1017151", "1016747", "1016395", "1016391", "1016145", "1015925",
    "1015923", "1015849", "1015818", "1015793", "1015792", "1015663", "1015414", "1015385", "1014839", "1014484",
    "1014003", "1013939", "1013905", "1013900", "1012693", "1012692", "1012212", "1012161", "1012015", "1012012",
    "1011343", "1011127", "1010940", "1010825", "1010775", "1010770", "1010590", "1009977", "1009569", "1009392",
    "1009032", "1008972", "1008545", "1008340", "1008122", "1008116", "1008113", "1008084", "1008075", "1007967",
    "1007901", "1007896", "1007847", "1007421", "1007398", "1007394", "1007393", "1007367", "1007269", "1007268",
    "1006718", "1005640", "1005460", "1004922", "1004437", "1004360", "1004216", "1003800", "1003559", "1003440",
    "1003151", "1003023", "1002896", "1002676", "1002675", "1002004", "1001996", "1001994", "1001992", "1001990",
    "1001931", "1001930", "1001841", "1001219", "1001216", "1000963", "1000922", "1000628", "1000623", "1000241",
    "1000237", "1000233", "1000227", "1000041", "999880", "999714", "999331", "999301", "999220", "998969", "998760",
    "998732", "998729", "998726", "998654", "998271", "998150", "998061", "997936", "997581", "997575", "997552",
    "997390", "997323", "997264", "997127", "997086", "996922", "996623", "995296", "995295", "995262", "994908",
    "994846", "994631", "994630", "993955", "992879", "992857", "992562", "992201", "992151", "992100", "991913",
    "991563", "990180", "990179", "989770", "989016", "988473", "988169", "987751", "987745", "987196", "987135",
    "987109", "987039", "987035", "987034", "986709", "986668", "986648", "986566", "986562", "986560", "986449",
    "986447", "986446", "986073", "986062", "985790", "985785", "985568", "985443", "985321", "984913", "984732",
    "984263", "984004", "983800", "983632", "983625", "982622", "982611", "981365", "981340", "980878", "980829",
    "980817", "980565", "980294", "980154", "980064", "979642", "979637", "979306", "979084", "979010", "978986",
    "978935", "978741", "978668", "978476", "978462", "978065", "977645", "977072", "977071", "976796", "976746",
    "976288", "976119", "976106", "976086", "975762", "975515", "975510", "975321", "975034", "974976", "974928",
    "974543", "974537", "974527", "974489", "974067", "974046", "973581", "973274", "973118", "972750", "972749",
    "972702","972689", "972500", "972496", "972488", "972474", "972467", "972462", "972421", "972416", "972382",
    "972381", "972308", "972048", "971972", "971932", "971897", "971784", "971783", "971539", "971476",
    "971393", "970118", "969997", "969189", "968858", "968799", "968508", "968447", "968430", "968402",
    "968022", "967951", "967881", "967878", "967628", "966760", "966546", "966249", "966216", "965921",
    "965457", "965452", "964967", "964688", "963512", "963196", "962882", "962881", "962880", "962823",
    "962659", "962494", "962317", "962213", "962211", "962185", "961550", "961187", "960815", "960673",
    "960619", "960313", "960289", "960026", "959928", "959765", "958791", "958334", "958332", "958330",
    "957955", "957797", "957432", "957429", "957292", "957284", "957279", "957059", "956687", "956512",
    "956509", "956346", "956108", "956095", "955606", "955300", "954729", "954722", "954562", "954561",
    "954265", "954262", "953131", "952918", "952476", "952296", "951630", "951273", "951141", "950969",
    "950963", "950958", "950817", "950407", "949948", "949918", "949914", "949209", "948642", "947642",
    "947113", "946616", "946614", "946547", "945723", "945385", "944439", "944326", "944321", "944019",
    "943770", "943670", "943666", "943356", "942861", "941818", "941817", "941816", "941815", "941560",
    "941501", "941500", "940615", "940493", "940264", "940058", "939883", "939880", "939876", "938708",
    "937697", "937524", "936110", "936080", "935686", "935513", "935194", "935066", "934705", "933703",
    "932732", "932727", "932593", "932381", "932349", "932311", "932165", "932164", "932070", "931150",
    "930903", "930902", "930826", "930772", "930497", "930494", "930484", "930481", "930414", "930413",
    "930382", "930292", "930050", "929741", "929734", "929616", "929614", "929392", "929342", "929168",
    "928594", "928589", "928555", "928534", "928527", "928499", "928466", "928213", "928184", "928180",
    "928174", "928085", "927840", "927207", "926756", "926535", "925686", "923644", "923630", "923372",
    "923204", "923202", "922915", "922393", "922391", "921357", "921227", "920956", "920894", "920840",
    "920384", "920118", "918981", "918763", "917504", "916590", "916148", "914373", "913713", "913708",
    "913542", "913188", "913129", "912893", "912892", "911801", "911665", "911360", "911223", "910713",
    "909309", "907862", "907859", "907856", "907853", "907850", "907256", "907254", "906610", "906431",
    "905543", "905202", "904157", "903566", "902534", "902036", "901996", "901608", "901605", "901353",
    "901324", "900896", "900727", "900148", "900068", "899998", "899945", "899912", "899595", "899516",
    "899500", "899207", "898527", "897972", "897826", "897817", "897809", "897808", "897711", "897707",
    "897002", "896249", "896140", "896125", "895766", "894547", "894107", "893946", "893522", "893096",
    "893070", "892644", "892625", "892502", "892499", "892493", "891669", "891439", "890759", "889402",
    "888738", "888624", "888578", "887968", "885228", "884966", "884903", "884902", "884299", "884292",
    "884291", "883087", "882574", "882573", "882570", "882397", "881906", "881725", "881703", "881698",
    "881623", "881343", "881339", "881156", "880582", "880581", "880579", "880565", "880538", "879912",
    "878402", "877605", "877340", "877338", "877335", "876829", "876455", "876177", "876115", "875947",
    "875840", "875337", "874184", "873790", "872977", "872081", "872075", "871635", "871284", "871282",
    "871124", "871070", "871015", "870239", "869945", "869392", "869370", "869300", "869140", "868898",
    "868654", "868276", "867861", "867441", "867438", "867434", "867199", "867155", "867033", "867032",
    "867031", "867030", "866492", "866097", "866063", "866058", "866054", "866050", "866003", "865729",
    "865658", "865120", "864469", "860984", "859390", "859209", "859205", "859147", "859000", "858576",
    "858117", "858103", "857644", "856804", "856705", "856325", "855237", "854121", "853579", "852305",
    "852016", "851826", "850153", "849047", "848174", "847554", "846616", "846304", "844955", "844157",
    "843831", "841217", "840087", "838003", "837514", "837319", "837273", "837182", "833171", "831990",
    "831986", "831724", "829184", "828978", "825730", "825402", "825321", "825318", "825316", "825312",
    "825245", "824605", "824601", "824541", "823770", "823762", "823627", "821278", "821276", "821217",
    "821120", "821080", "818309", "818300", "817420", "815878", "815877", "814588", "813319", "811765",
    "808703", "787255", "786284", "786175", "785952", "785339", "784661", "783985", "783636", "783629",
    "783100", "783025", "782636", "782301", "780677", "779856", "779382", "778248", "777476", "776019",
    "775698", "775255", "774097", "774010", "773998", "773702", "772674", "772592", "771872", "771869",
    "770234", "767624", "767327", "766518", "766256", "766174", "766040", "765790", "765475", "765389",
    "765072", "764959", "764295", "764284", "763324", "762893", "761239", "760829", "760807", "760676",
    "760475", "759640", "759485", "759440", "758541", "758320", "757918", "757893", "757828", "757695",
    "756928", "756467", "756380", "756373", "756357", "755930", "755928", "755226", "755029", "754344",
    "753558", "753463", "753138", "753114", "752891", "752621", "751644", "750912", "750906", "750778",
    "750415", "749653", "749652", "749651", "749274", "749131", "747605", "747604", "747600", "746712",
    "746697", "746693", "746499", "746323", "745505", "744226", "743970", "743228", "743221", "742827",
    "742826", "742782", "742772", "742768", "741838", "741782", "741769", "741273", "741121", "740851",
    "740561", "740499", "739893", "739403", "738804", "738446", "738427", "737968", "737890", "736649",
    "736342", "735973", "735172", "735041", "733865", "733775", "731960", "731456", "730830", "730328",
    "729947", "729851", "729845", "729833", "729803", "729303", "729228", "728749", "727738", "727321",
    "726643", "724837", "722651", "718007", "717216", "714925", "714070", "710490", "708891", "708193",
    "708046", "701756", "699805", "695406", "694504", "690182", "689766", "685225", "684082", "666542",
    "653225", "653100", "651049", "649663", "649244", "647665", "643975", "639674", "633915", "629068",
    "624614", "581159", "575879", "575760", "574045", "572408", "571057", "570392", "567259", "563311",
    "562013", "556002", "551318", "551314", "549506", "547163", "537493", "535767", "534018", "533754",
    "510917", "509633", "506389", "500535", "488171", "488160", "479748", "465935", "463822", "446169",
    "439461", "439085", "436344", "435381", "429073", "425919", "415909", "408381", "400417", "385025",
    "376997", "374545", "374542", "362891", "362884", "361488", "358843", "357419", "353542", "342971",
    "328800", "322631", "322264", "320810", "284333"};
        static List<string> roomlessAdditionalServiceList= new List<string>() {"1059723", "1059666", "1059603", "1059076", "1058470", "1055507", "1055505", "1055502", "1055380", "1055365",
    "1055353", "1054063", "1053992", "1053537", "1052008", "1051940", "1051550", "1050827", "1049538", "1048248",
    "1047291", "1047268", "1047119", "1046067", "1045761", "1045096", "1044648", "1043915", "1043680", "1043596",
    "1040636", "1039458", "1039344", "1036785", "1036627", "1033050", "1028897", "1028341", "1025201", "1022592",
    "1022032", "1019138", "1018414", "1017393", "1016469", "1014739", "1013566", "1013561", "1013551", "1012733",
    "1011808", "1009773", "1009761", "1009711", "1008768", "1008767", "1008757", "1006946", "1004135", "1003704",
    "1002596", "1002452", "1002217", "1001751", "1001217", "995190", "994628", "994545", "993833", "993084",
    "992327", "991964", "991733", "991712", "990494", "990078", "987704", "987136", "986586", "985698", "985395",
    "985293", "985238", "985027", "984944", "984852", "984828", "984681", "984422", "984336", "984138", "984067",
    "984065", "983380", "983352", "982971", "982134", "981853", "981711", "981348", "981284", "981203", "980477",
    "980215", "979777", "979303", "979302", "979301", "979294", "978966", "978830", "977390", "976829", "976105",
    "976058", "975645", "975415", "975414", "974803", "971529", "970955", "967549", "967460", "967026", "967025",
    "966787", "966744", "966252", "966251", "966226", "966225", "966046", "965723", "965722", "965668", "965320",
    "965319", "963259", "963202", "963105", "962783", "962782", "961995", "960195", "960108", "959764", "959670",
    "959525", "959282", "959014", "958994", "958966", "958946", "958711", "957545", "957305", "955215", "955088",
    "948639", "944245", "940978", "938247", "930343", "929850", "929837", "926843", "923323", "922079", "922078",
    "922077", "917796", "917795", "917508", "917365", "916900", "916626", "916610", "912954", "906831", "893233",
    "892808", "852683", "852468", "852179", "851502", "851377", "850608", "850418", "850239", "850052", "849485",
    "848979", "848532", "847611", "847284", "846939", "846478", "846459", "846418", "846145", "846003", "845891",
    "845828", "845754", "845267", "845213", "845054", "845046", "845014", "844821", "844109", "843979", "843263",
    "842680", "842441", "841951", "840891", "840359", "840041", "839479", "839047", "838612", "838611", "838205",
    "838202", "838166", "837466", "837403", "837334", "836983", "836981", "836971", "836566", "836125", "835540",
    "832589", "832134", "831920", "830788", "829166", "828744", "828743", "828262", "827412", "827291", "826264",
    "826263", "826253", "825191", "824965", "824788", "824116", "824093", "824054", "823529", "823147", "822553",
    "822308", "821945", "821612", "821598", "820577", "820568", "820238", "819633", "819349", "819154", "818960",
    "818587", "818574", "818361", "818234", "817798", "817757", "816142", "816133", "815982", "815980", "815948",
    "815929", "815351", "814799", "814793", "813944", "813827", "813448", "813012", "813011", "813010", "812798",
    "812650", "811135", "811019", "811018", "811017", "810977", "810973", "810961", "810911", "810794", "810613",
    "810597", "810439", "810122", "809991", "809623", "809347", "809336", "809000", "808278", "808068", "808053",
    "807868", "807250", "807043", "806820", "806813", "806808", "806251", "805821", "805024", "804839", "804614",
    "804329", "804325", "804324", "804322", "804320", "804318", "804316", "804026", "803461", "803460", "803307",
    "802855", "799417", "798237", "796032", "795771", "794014", "793885", "793712", "793711", "793502", "793430",
    "792643", "792379", "790846", "790339", "790338", "790336", "790335", "790330", "790329", "789749", "789583",
    "789581", "789550", "788431", "787204", "786756", "786519", "786460", "786307", "786205", "785885", "785884",
    "785883", "785882", "785846", "785814", "785812", "785809", "785796", "785666", "785451", "785448", "785393",
    "785370", "785276", "785108", "784717", "784703", "784461", "784355", "784338", "784283", "784207", "784198",
    "784007", "784004", "783830", "783678", "783504", "783472", "783378", "783199", "783198", "783152", "783037",
    "782874", "782853", "782846", "782728", "782687", "782684", "782354", "782353", "782241", "782205", "782013",
    "781042", "780965", "780929", "780881", "780827", "780826", "780825", "780608", "780454", "780250", "780213",
    "780212", "780057", "779786", "779777", "779097", "778963", "778523", "778310", "778165", "777887", "777474",
    "777471", "777457", "776534", "775939", "775917", "775901", "775814", "775726", "775689", "775618", "775557",
    "774825", "774724", "774492", "774414", "774109", "774053", "773780", "773485", "773434", "773433", "773024",
    "772922", "772732", "772469", "772304", "772282", "771916", "771733", "771724", "771715", "771085", "770711",
    "770389", "770355", "769041", "768582", "768324", "767713", "767476", "767473", "767471", "766894", "766496",
    "766492", "766455", "766348", "766265", "766027", "765651", "765609", "763846", "763751", "762626", "761967",
    "761481", "760205", "760173", "759430", "759416", "758777", "758742", "758546", "758539", "758307", "757925",
    "757609", "757198", "756518", "756489", "755952", "755937", "755782", "755739", "755313", "755297", "755261",
    "754984", "754948", "754497", "754289", "753964", "753891", "753717", "753695", "753687", "753536", "753173",
    "752718", "752520", "752371", "752257", "751244", "751174", "750446", "750271", "750266", "750261", "749792",
    "748787", "747298", "747166", "746832", "746698", "746388", "746360", "746052", "746032", "745115", "744129",
    "743427", "742323", "742065", "742006", "741201", "739138", "735399", "735283", "735056", "734598",
    "734253", "734222", "734062", "733965", "733441", "733397", "733396", "733391", "733023", "732977",
    "731285", "731279", "731274", "731192", "730081", "730080", "729675", "729673", "729482", "729019",
    "728985", "728965", "728014", "728003", "727960", "727683", "727661", "727544", "726874", "726777",
    "726689", "726506", "726375", "726314", "725475", "725473", "725404", "724935", "724626", "724602",
    "724028", "723820", "723710", "723109", "723063", "722917", "722807", "722800", "722794", "722788",
    "722786", "722747", "722627", "722619", "722597", "722592", "722586", "722576", "722527", "722448",
    "722298", "722246", "721814", "721311", "720910", "720496", "720415", "720384", "720357", "720334",
    "720323", "720284", "719774", "719717", "719698", "719558", "719251", "719248", "719205", "719170",
    "719153", "718501", "718345", "718267", "718076", "718071", "717977", "717939", "717663", "716785",
    "716783", "716781", "716780", "716668", "716493", "716398", "716105", "715570", "715569", "715271",
    "715188", "715172", "715073", "715067", "715066", "715044", "715036", "714911", "714907", "714900",
    "714886", "714428", "713671", "713560", "713493", "713470", "713426", "713359", "712962", "712956",
    "712955", "712951", "712950", "712949", "712382", "711926", "711731", "711728", "711717", "711064",
    "711062", "710997", "710588", "710587", "710584", "710520", "710356", "710246", "710207", "710199",
    "710171", "710145", "710056", "709961", "709687", "709387", "709179", "708554", "708311", "708310",
    "708308", "707477", "707442", "706968", "706964", "706961", "706572", "706365", "706164", "705907",
    "705881", "705359", "704757", "704294", "704287", "704144", "703987", "703985", "703952", "703947",
    "703806", "703366", "703046", "702975", "702955", "702773", "702736", "702717", "702406", "702405",
    "702135", "702119", "702068", "701919", "701811", "701572", "701407", "700709", "700346", "700093",
    "699933", "699928", "699926", "699474", "698713", "698366", "697939", "696346", "696024", "694818",
    "694503", "694502", "694430", "694202", "693937", "693896", "693048", "692801", "692798", "692389",
    "692276", "692168", "692123", "691646", "691448", "691267", "690898", "690826", "689967", "689627",
    "689556", "689412", "689087", "688948", "688860", "688859", "688638", "688504", "687580", "687573",
    "686567", "686388", "686307", "686262", "686253", "686120", "686096", "685489", "685296", "684633",
    "684087", "684086", "683625", "683566", "683456", "683452", "683444", "683434", "682944", "682929",
    "682531", "681934", "681845", "681597", "681421", "681191", "681061", "681060", "680808", "680804",
    "680803", "680799", "680796", "680670", "680462", "680457", "680453", "680395", "680357", "680296",
    "680290", "680288", "680286", "680282", "680280", "680265", "680263", "679895", "679888", "679887",
    "679739", "679733", "679729", "678750", "678743", "678736", "678328", "678327", "677856", "677818",
    "677791", "677508", "677457", "677099", "676696", "676602", "676598", "676588", "676399", "676202",
    "676130", "676122", "675649", "675210", "675116", "675110", "675102", "675101", "675048", "674777",
    "674623", "674582", "674463", "674041", "673921", "673566", "673345", "673253", "673248", "673208",
    "673159", "672663", "672595", "672594", "672583", "672582", "672578", "672575", "672569", "672461",
    "672418", "672196", "672194", "672171", "672087", "672076", "672062", "672042", "672033", "672026",
    "672019", "671884", "671713", "671559", "671132", "671068", "670575", "670568", "670560", "670555",
    "670543", "670534", "670299", "670199", "669994", "669991", "669990", "669989", "669842", "669841",
    "669703", "669701", "669496", "669493", "669471", "669383", "669374", "669371", "669200", "669115",
    "669114", "668917", "668722", "668486", "667469", "667450", "667342", "667334", "667244", "667207",
    "667198", "667124", "666659", "666427", "666302", "666084", "666021", "666019", "666010", "665998",
    "665982", "665979", "665976", "665974", "665970", "665921", "665920", "665809", "665521", "664832",
    "664415", "664136", "663651", "663416", "663246", "662407", "662134", "661787", "661155", "661154",
    "660883", "660882", "660773", "660585", "660371", "658940", "657916", "656887", "654742", "653407",
    "652936", "652935", "652934", "652109", "650905", "650644", "650155", "648786", "648388", "648307",
    "647830", "647730", "647180", "646047", "645969", "645967", "645966", "645923", "645809", "645030",
    "643748", "643747", "643746", "643744", "643742", "643741", "643736", "643337", "642964", "642634",
    "639116", "637929", "636203", "635828", "635811", "635344", "635128", "634841", "634478", "634054",
    "630673", "630378", "630116", "630001", "628500", "628385", "627818", "627809", "627806", "627395",
    "627394", "627393", "627392", "627391", "627390", "627389", "627388", "626993", "625865", "625856",
    "625851", "625280", "625193", "624812", "624354", "624064", "623046", "622698", "622118", "621748",
    "621731", "621455", "618988", "617999", "615949", "615863", "612646", "612391", "612171", "611350",
    "605959", "605488", "604149", "603568", "602252", "601084", "601053", "600115", "600112", "599964",
    "599801", "599800", "599798", "599795", "599793", "599792", "599791", "599790", "599788", "598896",
    "598704", "598313", "598009", "597534", "597488", "597461", "597218", "597216", "597215", "597214",
    "597213", "597212", "597211", "597189", "597188", "597187", "597185", "594763", "593328", "592493",
    "592186", "591684", "589170", "588483", "588482", "588307", "588198", "587640", "587311", "587310",
    "587306", "587137", "586223", "585806", "585301", "584974", "583332", "583330", "583328", "583322",
    "583320", "583284", "581959", "580472", "580395", "580394", "580393", "580386", "580385", "580384",
    "580383", "580375", "580374", "580366", "580362", "578334", "571822", "570560", "568404", "568403",
    "567827", "564963", "564319", "563805", "562158", "559495", "557784", "557678", "557675", "557665",
    "557531", "557530", "557528", "557514", "555836", "555835", "555834", "555833", "555832", "555829",
    "555828", "555827", "555826", "555825", "555823", "555816", "554105", "553630", "553419", "552618",
    "548479", "546593", "546376", "542881", "542859", "542808", "542144", "540330", "538697", "536574",
    "536572", "536571", "536546", "536429", "536424", "536423", "536421", "535101", "534893", "534890",
    "533508", "533483", "533397", "531864", "526897", "526896", "526892", "526889", "526644", "525321", "524268", "521194", "520730", "520729", "520728", "520727", "519856", "519828", "519446", "518833",
    "518802", "518445", "518012", "517604", "517603", "517602", "517601", "517600", "517509", "517508",
    "517507", "517506", "515561", "515090", "515079", "514100", "512143", "510548", "508844", "508794",
    "508391", "508116", "508083", "508082", "508081", "508080", "508079", "508078", "508077", "508055",
    "508054", "508053", "508052", "508049", "508048", "508047", "508032", "508029", "508028", "508027",
    "508024", "508023", "508022", "507996", "507771", "507209", "506439", "506369", "506367", "506157",
    "506027", "505229", "505228", "505226", "505225", "505223", "505219", "505215", "502959", "502958",
    "502957", "502956", "502954", "502917", "502916", "502915", "502914", "502911", "501450", "501330",
    "499004", "497591", "494699", "494698", "494697", "494696", "494695", "494694", "494367", "492620",
    "492619", "492473", "490875", "490874", "490873", "490872", "490848", "489128", "486691", "486139",
    "485526", "485525", "485524", "485522", "485521", "485520", "485519", "485518", "485517", "483967",
    "482036", "481905", "481446", "481444", "481196", "481193", "472999", "472913", "472910", "472907",
    "472905", "472901", "472896", "472892", "472891", "472890", "472889", "472888", "472879", "472878",
    "472875", "472861", "472857", "472854", "472853", "472846", "472844", "472837", "472834", "472809",
    "472798", "472796", "472735", "472720", "472716", "470590", "469985", "469267", "467869", "456704",
    "456411", "455729", "455228", "454743", "454522", "454518", "454458", "454437", "454076", "453980",
    "453754", "453570", "453569", "453558", "453547", "453136", "452486", "452485", "452148", "451451",
    "451443", "451387", "450185", "450180", "448944", "448432", "447756", "447127", "445654", "445191",
    "445077", "444842", "444841", "444840", "444839", "444838", "444837", "444836", "444835", "444802",
    "443720", "443716", "443576", "443333", "442383", "441208", "441200", "441195", "441187", "440917",
    "440910", "440906", "440904", "440901", "439261", "439254", "438758", "438335", "438224", "436009",
    "435273", "433934", "433931", "433890", "433889", "433888", "433887", "433886", "433885", "433884",
    "433864", "433510", "430573", "430570", "428336", "428054", "426794", "426764", "426763", "426762",
    "426761", "426750", "426715", "426708", "425867", "425218", "424979", "424295", "422595", "420702",
    "419892", "419882", "418100", "418093", "418026", "417751", "417750", "415250", "414359", "412286",
    "412277", "412272", "412271", "412270", "412246", "412187", "412176", "412118", "410502", "410286",
    "409620", "407317", "407316", "407313", "407312", "407311", "407310", "407309", "407308", "407307",
    "407306", "407305", "407304", "407303", "407302", "407301", "404941", "404794", "404791", "404782",
    "404772", "404769", "404767", "404757", "404756", "404722", "404440", "402701", "401739", "401228",
    "401224", "401087", "401084", "400672", "399761", "399757", "399756", "399754", "398090", "397688",
    "397683", "397640", "397639", "397628", "397588", "397527", "397526", "397525", "397520", "397519",
    "397517", "397516", "397506", "397496", "397495", "397494", "397493", "397492", "397457", "396511",
    "391993", "391992", "391989", "391131", "390247", "389504", "389256", "389219", "387900", "387898",
    "387897", "387896", "387894", "387893", "387891", "387890", "387889", "387888", "387872", "387870",
    "387842", "387834", "386933", "385992", "385991", "385988", "385804", "385679", "385678", "385677",
    "385675", "385674", "385669", "382907", "382793", "382792", "382695", "382635", "381770", "378913",
    "378856", "378699", "378697", "378673", "378513", "378510", "378508", "378501", "378500", "378465",
    "377820", "377126", "377011", "376611", "376419", "376412", "376392", "376309", "376117", "376089",
    "376088", "376066", "376050", "376049", "375250", "374551", "374282", "374280", "374278", "374277",
    "374222", "373821", "373416", "373298", "373197", "372258", "372257", "371212", "370140", "369897", "369624", "369162", "368620", "368610", "368069", "367231", "367230", "366939", "366938", "366767",
    "365665", "365189", "364706", "364602", "363788", "362566", "362226", "361023", "359804", "359803",
    "358467", "358005", "358004", "358003", "358001", "357875", "357866", "354890", "353524", "353523",
    "353460", "353035", "352857", "352843", "352435", "352000", "351991", "351749", "351189", "351188",
    "351186", "350651", "350649", "348473", "346936", "346388", "345111", "344213", "341931", "341912",
    "337029", "336677", "332694", "332615", "332309", "330933", "329091", "327625", "327207", "326848",
    "325573", "325091", "324998", "324403", "324094", "323445", "323147", "323145", "323138", "323135",
    "323050", "322738", "322686", "322399", "322386", "322374", "320585", "319737", "319057", "318655",
    "318242", "317754", "317751", "317742", "317736", "314972", "312341", "312337", "311494", "311088",
    "308129", "304824", "302601", "301970", "301894", "301893", "301584", "296770", "294927", "294429",
    "293612", "293313", "292485", "292000", "291825", "291647", "291279", "290525", "289921", "289420",
    "289382", "289247", "288842", "288590", "288588", "288201", "288020", "287825", "287087", "286355",
    "286167", "286079", "285888", "285522", "283639", "283638", "282904", "281493", "281307", "280292",
    "280291", "280290", "279469", "277969", "276642", "276200", "276075", "275642", "275461", "275193",
    "274033", "273281", "272791", "272786", "271007", "270945", "270942", "269957", "269697", "269516",
    "268707", "268155", "268087", "268082", "265795", "265344", "264579", "264578", "263164", "262313",
    "262311", "262244", "259992", "259976", "259435", "259417", "259305", "258960", "257251", "256643",
    "256597", "256246", "256040", "255751", "255507", "255495", "254166", "252814", "251379", "251113",
    "250906", "250093", "249758", "249523", "249028", "248679", "248535", "248415", "247686", "247640",
    "247530", "247529", "246673", "246647", "246644", "245889", "245717", "244391", "243698", "243010",
    "241857", "241666", "241528", "241027", "240391", "240390", "238486", "238196", "237400", "236724",
    "236379", "236020", "235810", "234998", "234917", "234916", "234709", "234149", "234002", "233571",
    "233540", "232153", "231544", "231063", "230973", "229827", "229798", "229582", "228793", "228743",
    "228608", "228252", "227893", "227511", "227483", "227461", "227460", "227256", "227200", "227199",
    "227198", "227114", "227113", "226629", "226229", "225585", "225080", "224810", "224285", "224090",
    "224089", "223826", "223738", "223654", "223584", "223579", "223542", "223178", "223119", "223118",
    "223117", "223032", "222592", "222477", "222307", "222214", "222212", "222020", "221732", "221681",
    "221512", "221179", "221116", "220994", "220909", "220329", "220328", "219901", "219900", "219832",
    "218531", "218057", "218047", "218037", "218020", "218017", "217546", "217545", "217544", "217452",
    "216621", "215657", "215515", "215513", "215288", "215286", "214928", "213932", "213814", "212899",
    "210707", "210639", "210507", "210505", "210504", "210264", "208543", "208527", "206793", "206790",
    "206789", "206377", "205448", "204839", "204516", "204339", "204179", "203481", "203464", "203337",
    "202777", "201660", "200099", "200010", "199697", "199683", "199336", "198661", "198176", "196795",
    "196794", "196793", "196533", "195143", "195142", "194681", "194265", "193920", "193443", "191548",
    "190486", "190461", "190259", "190228", "189634", "188794", "187771", "186303", "184852", "184808",
    "184807", "184721", "184352", "184350", "184143", "181823", "180244", "179688", "179379", "178438",
    "176170", "175632", "173481", "173144", "172871", "172436", "172434", "171399", "170446", "169706",
    "169704", "169703", "169695", "169588", "167935", "167663", "166449", "165871", "163481" };

		// serviceorigin değişiyor  isadditional kalkacak 21.03.2024  // serviceorigin 0 -> 3 olacak, additional service -> 4
		//service tablosu serviceorigin  ->>> serviseoriginid
		// service origin düzenlendikten sonra  isadditional kolon kalkabilir.
		//service tablosu  hasMismatchedRoomTypes  kolonu migrate bittikten sonra kaldırılabilir.

		// hotel odaları kontol edilmeli cok eksik var 21.03.2024
		//sprint notları kontrol et  21.03.2024
		// providerconfirmation number eklendi satır 840 tekrar çalıştırılması gerekiyor uygulamak için 29.03.2024
		// eskiservis tablosundaki XMLRef yeni tabloya taşınmadı. doiserno olmayıp xmlrefi dolu olan kayıtlar olabilir. Sor öğren 17.10.2024

		public static void MigrateServiceTables()
        {
            using (KeyConNew saasDb = new KeyConNew())
            {

                //List<int> excludedServices = new List<int> { 933717, 933757, 934534 };
                //List<int> excludedServices = new List<int> { 1038767, 1038761 };
                Console.WriteLine("Reading services");
                var Service_OldCount = saasDb.Service_Old.Where(x =>
                        (!(x.Service_Type == null || x.Service_Type.Equals("")))
                        && (x.Service_ID == 1059775)
                        && (!(x.Supplier == null || x.Supplier.Equals(""))) 
                        && x.Ref_ID != null 
                        && (!x.Service_IsRowDeleted.HasValue || (x.Service_IsRowDeleted.HasValue && !x.Service_IsRowDeleted.Value))
                        && x.Pax != null && x.Pax > 0)                        
                        .Count();

                int iterationCount = Service_OldCount / 500;
                iterationCount++;

                var saasDbStatusTypes = saasDb.ServiceStatusTypes.ToList();
                var serviceTypes = saasDb.ServiceTypes.ToList();
                var hotelRoomTypes = saasDb.HotelRoomTypes.ToList();

                for (int iteration = 0; iteration < iterationCount; iteration++)
                {
                    Console.WriteLine("iteration " + iteration );

                    var saasDbServices = saasDb.Service_Old.Where(x =>
                        (!(x.Service_Type == null || x.Service_Type.Equals("")))
                        && (x.Service_ID == 1059775)
                        && (!(x.Supplier == null || x.Supplier.Equals(""))) 
                        && x.Ref_ID != null 
                        && (!x.Service_IsRowDeleted.HasValue || (x.Service_IsRowDeleted.HasValue && !x.Service_IsRowDeleted.Value))
                        && x.Pax != null && x.Pax > 0)
                        .OrderByDescending(x => x.Service_ID).Skip(iteration * 500).Take(500).ToList();

                    //&& (x.Service_ID < 1035937)
                    //&& (excludedServices.Contains(x.Service_ID))
                    //x.Date > new DateTime(2018, 1, 1) &&

                    Console.WriteLine("Read services");
                    int i = 0;
                    Service_Old devDbService;
                    Service_Old devDbHotelService;
                    string serviceType = "";

                    for (i = 0; i < saasDbServices.Count; i++)
                    {
                        Console.WriteLine(saasDbServices[i].Service_ID);


                        var currentService = saasDb.Service2.Where(s => s.ServiceID == saasDbServices[i].Service_ID).FirstOrDefault();          //for update
                        if (currentService != null)                                                                                             //for update
                        {                                                                                                                       //for update
                            saasDb.Service2.Remove(currentService);                                                                              //for update
                        }                                                                                                                        //for update
                        var currentServiceHotelRoom = saasDb.ServiceHotelRoom2.Where(s => s.ServiceID == saasDbServices[i].Service_ID).ToList(); //for update
                        if (currentServiceHotelRoom.Count > 0)                                                                                    //for update
                        {                                                                                                                          //for update
                            saasDb.ServiceHotelRoom2.RemoveRange(currentServiceHotelRoom);                                                       //for update
                        }                                                                                                                          //for update


                        devDbService = saasDbServices[i];

                        //var serviceExist = saasDb.Service2.Where(s => s.ServiceID == devDbService.Service_ID).FirstOrDefault();
                        //if (serviceExist != null)
                        //{
                        //    serviceExist = null;
                        //    continue;
                        //}

                        string[] fields;
                        Doiser devDbDoiser = saasDb.Doisers.FirstOrDefault(x => x.ServiceId == devDbService.Service_ID);
                        Service2 saasService = new Service2();
                        saasService.RefID = devDbService.Ref_ID.Value;
                        saasService.ServiceID = devDbService.Service_ID;
                        saasService.ParentServiceID = devDbService.Parent_Service_ID;
                        saasService.ServiceName = devDbService.Supplier;

                        if (devDbService.Tour_Item.StartsWith("Additional"))
                        {
                            saasService.IsAdditionalService = true;
                            serviceType = devDbService.Service_Type.Replace(" ", "").Substring(0, 4);
                        }
                        else
                        {
                            saasService.IsAdditionalService = false;
                            serviceType = devDbService.Tour_Item.Replace(" ", "").Substring(0, 4);
                        }
                        if (serviceType.ToLower().Equals("sigh"))
                        {
                            serviceType = "Activity";
                        }
                        else if (serviceType.ToLower().Equals("Carrental"))
                        {
                            try
                            {
                                if (!string.IsNullOrWhiteSpace(devDbDoiser.RemoteRoomId))
                                {
                                    var carJson = JsonConvert.DeserializeObject<CarJsonInfo>(devDbDoiser.RemoteRoomId);

                                    if (!string.IsNullOrEmpty(carJson.TransferredData.PickUpLocId))
                                    {
                                        saasService.PickupLocationID = carJson.TransferredData.PickUpLocId;
                                    }
                                    else
                                    {
                                        saasService.PickupLocationID = carJson.TransferredData.LocId;
                                    }

                                    if (!string.IsNullOrEmpty(carJson.TransferredData.DropOffLocId))
                                    {
                                        saasService.DropoffLocationID = carJson.TransferredData.DropOffLocId;
                                    }
                                    else
                                    {
                                        saasService.DropoffLocationID = carJson.TransferredData.LocId;
                                    }
                                }
                            }
                            catch
                            {

                            }
                        }
                        else if (serviceType.ToLower().Equals("Tours and Cruises"))
                        {

                            for (int s = 1; s <= devDbService.Service_NumSingleRooms; s++)
                            {
                                var singleRoom = hotelRoomTypes.Where(h => h.HotelRoomTypeID == 1).FirstOrDefault();
                                ServiceHotelRoom2 hotelRoom = new ServiceHotelRoom2() { ServiceID = devDbService.Service_ID, isRefundable = true };
                                hotelRoom.RoomName = singleRoom.Name + " Room";
                                hotelRoom.HotelRoomTypeID = singleRoom.HotelRoomTypeID;
                                hotelRoom.RoomPrice = devDbService.SinglePrice;
                                hotelRoom.RoomPriceNet = 0; // RoomPriceNet cant get from any fields // yakup - atilla

                                saasDb.ServiceHotelRoom2.Add(hotelRoom);
                            }

                            for (int d = 1; d <= devDbService.Service_NumDoubleRooms; d++)
                            {
                                var doubleRoom = hotelRoomTypes.Where(h => h.HotelRoomTypeID == 2).FirstOrDefault();
                                ServiceHotelRoom2 hotelRoom = new ServiceHotelRoom2() { ServiceID = devDbService.Service_ID, isRefundable = true };
                                hotelRoom.RoomName = doubleRoom.Name + " Room";
                                hotelRoom.HotelRoomTypeID = doubleRoom.HotelRoomTypeID;
                                hotelRoom.RoomPrice = devDbService.DoublePrice * 2;
                                hotelRoom.RoomPriceNet = 0; // RoomPriceNet cant get from any fields // yakup - atilla

                                saasDb.ServiceHotelRoom2.Add(hotelRoom);
                            }

                            for (int t = 1; t <= devDbService.Service_NumTripleRooms; t++)
                            {
                                var tripleRoom = hotelRoomTypes.Where(h => h.HotelRoomTypeID == 4).FirstOrDefault();
                                ServiceHotelRoom2 hotelRoom = new ServiceHotelRoom2() { ServiceID = devDbService.Service_ID, isRefundable = true };
                                hotelRoom.RoomName = tripleRoom.Name + " Room";
                                hotelRoom.HotelRoomTypeID = tripleRoom.HotelRoomTypeID;
                                hotelRoom.RoomPrice = devDbService.TriplePrice * 3;
                                hotelRoom.RoomPriceNet = 0; // RoomPriceNet cant get from any fields // yakup - atilla

                                saasDb.ServiceHotelRoom2.Add(hotelRoom);
                            }

                            for (int q = 1; q <= devDbService.Service_NumQuadRooms; q++)
                            {
                                var quadRoom = hotelRoomTypes.Where(h => h.HotelRoomTypeID == 5).FirstOrDefault();
                                ServiceHotelRoom2 hotelRoom = new ServiceHotelRoom2() { ServiceID = devDbService.Service_ID, isRefundable = true };
                                hotelRoom.RoomName = quadRoom.Name + " Room";
                                hotelRoom.HotelRoomTypeID = quadRoom.HotelRoomTypeID;
                                hotelRoom.RoomPrice = devDbService.QuadPrice != null ? (decimal)devDbService.QuadPrice * 4 : 0;
                                hotelRoom.RoomPriceNet = 0; // RoomPriceNet cant get from any fields // yakup - atilla

                                saasDb.ServiceHotelRoom2.Add(hotelRoom);
                            }



                        }
                        if (serviceType.ToLower().Equals("pack"))
                        {
                            serviceType = "Vacation Package";
                        }

                        saasService.ServiceTypeID = serviceTypes.Where(x => x.ServiceTypeName.ToLower().StartsWith(serviceType.ToLower())).FirstOrDefault().ServiceTypeId;

                        devDbHotelService = null;
                        if (devDbService.Tour_Item == "Hotel" || (devDbService.Tour_Item.StartsWith("Addit") && devDbService.Service_Type == "Hotel"))
                        {
                            devDbHotelService = devDbService;
                        }

                        //if (devDbService.Parent_Service_ID.HasValue)
                        //{
                        //    saasService.ParentServiceID = devDbService.Parent_Service_ID.Value;
                        //    devDbService = devDb.Services.FirstOrDefault(x => x.Service_ID == saasService.ParentServiceID);
                        //    if (devDbService == null)
                        //    {
                        //        continue;
                        //    }
                        //}

                        if (devDbService.Status == "HLO") 
                            devDbService.Status = "HOLD";

                        if (devDbService.Status == "HK" || devDbService.Status == "HK ")
                            devDbService.Status = "OK";

                        if (devDbService.Status == "123" || devDbService.Status == "rq " || devDbService.Status == "0" || string.IsNullOrEmpty(devDbService.Status)
                            || devDbService.Status == "QR " || devDbService.Status == "QR" || devDbService.Status == "WL")
                            devDbService.Status = "RQ";

                        if (devDbService.Status == "CNX")
                            devDbService.Status = "CL";

                        saasService.ServiceStatusID = saasDbStatusTypes.Where(x => x.ServiceStatusName.Equals(devDbService.Status.ToUpper().Trim())).FirstOrDefault().ServiceStatusId;

                        if (devDbService.Service_Origin.HasValue)
                        {
                            //saasService.ServiceOrigin = devDbService.Service_Origin.Value;
                        }
                        else
                        {
                            if (!string.IsNullOrWhiteSpace(devDbService.Service_PromotionDiscountType) && devDbService.Service_PromotionDiscountType.ToLower().Contains("bundle"))
                            {
                                //saasService.ServiceOrigin = 1;
                            }
                            else
                            {
                                //saasService.ServiceOrigin = 0;
                            }
                        }


                        saasService.StartDateTime = devDbService.Date.Value;
                        saasService.EndDateTime = devDbService.Date.Value.AddDays(devDbService.Night.HasValue ? devDbService.Night.Value : 0);
                        saasService.Detail = devDbService.Details;
                        saasService.Pax = devDbService.Pax.Value;
                        saasService.ChildCount = devDbService.ChildCount;
                        if (devDbService.Destination_ID.HasValue)
                        {
                            saasService.DestinationID = devDbService.Destination_ID.HasValue ? devDbService.Destination_ID.Value : 0;
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(devDbService.City))
                            {
                                Destination dest = saasDb.Destinations.Where(x => x.Destination_Name.ToLower().Equals(devDbService.City.ToLower())).OrderBy(x => x.Destination_ID).FirstOrDefault();
                                if (dest != null)
                                {
                                    saasService.DestinationID = dest.Destination_ID;
                                }
                            }
                        }

                        saasService.TourServiceListID = devDbService.Tour_Service_List_ID;

                        if (devDbService.Booking_Agent_ID.HasValue)
                        {
                            if (saasDb.BookingAgents.Any(x => x.Booking_Agent_ID == devDbService.Booking_Agent_ID.Value))
                            {
                                saasService.CratedUserID = devDbService.Booking_Agent_ID.Value;
                            }
                        }

                        if (devDbService.Service_ModifiedBy.HasValue)
                        {
                            if (saasDb.BookingAgents.Any(x => x.Booking_Agent_ID == devDbService.Service_ModifiedBy.Value))
                            {
                                saasService.ModifiedUserID = devDbService.Service_ModifiedBy.Value;
                            }
                        }

                        saasService.SupplierID = devDbService.Supl_ID;
                        saasService.ParentSupplierID = devDbService.ParentSuplID;
                        saasService.OperatedSupplierID = devDbService.OperatedSuplID;
                        saasService.ParsecHotelID = devDbService.OnlineHotelID;
                        saasService.TourID = devDbService.Tour_ID;

                        if (!devDbService.ProviderCode.HasValue)
                        {
                            saasService.ProviderCode = 0;
                        }
                        else
                        {
                            saasService.ProviderCode = devDbService.ProviderCode.Value;
                            switch (saasService.ProviderCode)
                            {
                                case 0:
                                case 4000:
                                case 8000:
                                case 9000:
                                    saasService.ProviderID = devDbService.Tour_Code;
                                    break;
                                case 6000:
                                    fields = devDbService.Tour_Code.Split(';');
                                    saasService.ProviderID = fields[0];
                                    if (fields.Length > 1)
                                    {
                                        saasService.ProviderSelectedOption = fields[1];
                                    }
                                    break;
                                case 2000:
                                    saasService.ProviderID = devDbService.Tour_Code;
                                    saasService.ProviderSelectedOption = devDbService.TC_Token;
                                    break;
                                case 3000:
                                    saasService.ProviderID = devDbService.AE_QuoteID;
                                    saasService.ProviderSelectedOption = devDbService.AE_SIPP;
                                    break;
                                default:
                                    break;

                            }
                            if (saasService.ProviderCode != 0 && devDbService.Status == "OKO" && devDbDoiser != null)
                            {
                                saasService.ProviderConfirmationNumber = devDbDoiser.DoiserNo;
                                if (devDbDoiser.ConfirmedDate.HasValue)
                                {
                                    saasService.ProviderConfirmedDate = devDbDoiser.ConfirmedDate.Value;
                                }
                            }
                        }
                        saasService.SupplierNote = devDbService.Supl_Memo;
                        saasService.InternalNotes = devDbService.Service_InternalNotes;
                        saasService.SpecialNotes = devDbService.Service_SpecialNotes;
                        saasService.PriceCalculationNotes = devDbService.Service_CalculationNotes;
                        saasService.PickupPoint = devDbService.Service_PickupPoint;
                        saasService.PickupDetail = devDbService.Service_PickupDetail;
                        saasService.DropoffPoint = devDbService.Service_DropoffPoint;
                        try
                        {
                            DateTime serviceTime;
                            if (!string.IsNullOrEmpty(devDbService.Service_PickupTime))
                            {
                                serviceTime = DateTime.Parse(devDbService.Service_PickupTime);
                                saasService.PickupPointTime = devDbService.Date.Value.Date.Add(serviceTime.TimeOfDay);
                            }
                            if (!string.IsNullOrEmpty(devDbService.Service_DropoffTime))
                            {
                                serviceTime = DateTime.Parse(devDbService.Service_DropoffTime);
                                saasService.DropoffPointTime = saasService.EndDateTime.Date.Add(serviceTime.TimeOfDay);
                            }

                        }
                        catch (Exception ex)
                        {

                        }
                        saasService.Duration = devDbService.Duration;
                        saasService.ServicePrice = devDbService.ServicePrice != null ? (decimal)devDbService.ServicePrice : 0;
                        saasService.ServicePricePerPerson = devDbService.ServicePricePerPerson;
                        saasService.RefundAmount = devDbService.RefundAmount;
                        saasService.PrivateTourPrice = devDbService.Service_PrivateTourPrice;

                        if (devDbService.CommissionPrice.HasValue)
                        {
                            saasService.CommissionPrice = (decimal)devDbService.CommissionPrice.Value;
                        }
                        if (!string.IsNullOrWhiteSpace(devDbService.Commission))
                        {
                            try
                            {
                                saasService.CommissionRate = Int32.Parse(devDbService.Commission);
                            }
                            catch
                            {
                                //
                            }
                        }
                        if (devDbService.PriceNetUsd.HasValue)
                        {
                            saasService.NetPriceInUSD = (decimal)devDbService.PriceNetUsd.Value;
                        }
                        if (devDbService.PriceNetLocal.HasValue)
                        {
                            saasService.NetPriceInLocalCurrency = (decimal)devDbService.PriceNetLocal.Value;
                        }
                        if (devDbService.PriceNetLocCurID.HasValue)
                        {
                            saasService.NetPriceCurrencyID = devDbService.PriceNetLocCurID.Value;
                        }
                        if (devDbService.RateAmount.HasValue)
                        {
                            saasService.NetPriceExchangeRateAmount = (decimal)devDbService.RateAmount.Value;
                        }

                        saasService.PromotionDiscountType = devDbService.Service_PromotionDiscountType;
                        saasService.PromotionDiscountValue = (decimal?)devDbService.Service_PromotionDiscountValue;
                        saasService.PromotionDiscountAmount = (decimal?)devDbService.Service_PromotionReductions;
                        saasService.PassengerInfo = devDbService.Service_PassengerInfo;
                        saasService.ModificationDate = devDbService.Service_ModificationDate;
                        saasService.CreationDate = devDbService.Service_CreationDate.HasValue ? devDbService.Service_CreationDate.Value : devDbService.Date.Value;
                        saasService.SupplierNotificationSendDate = devDbService.sent_date;
                        saasService.HotelConfirmExpirationDate = devDbService.HotelConfirmExpirationDate;
                        saasService.IsHidden = devDbService.isHidden;
                        saasService.IsRefundable = devDbService.isNonRefundable.HasValue ? (!devDbService.isNonRefundable.Value) : (bool?)null;
                        saasService.IsDeleted = devDbService.Service_IsRowDeleted.HasValue ? devDbService.Service_IsRowDeleted.Value : false;

                        ServiceHotelRoom2 saasDbHotelRoom = null;
                        if (devDbHotelService != null)
                        {
                            if (devDbHotelService.Tour_Item == "Hotel")
                            {
                                if (saasService.ParentServiceID.HasValue)
                                {
                                    #region hotels added for tours and cruises
                                    if (devDbHotelService.Service_NumSingleRooms.HasValue && devDbHotelService.Service_NumSingleRooms > 0)
                                    {
                                        for (int roomCount = 0; roomCount < devDbHotelService.Service_NumSingleRooms; roomCount++)
                                        {
                                            saasDbHotelRoom = new ServiceHotelRoom2();
                                            saasDbHotelRoom.RoomName = "Single";
                                            saasDbHotelRoom.HotelRoomTypeID = hotelRoomTypes.FirstOrDefault(x => x.Name == "Single").HotelRoomTypeID;
                                            saasDbHotelRoom.ServiceID = saasService.ServiceID;
                                            saasDbHotelRoom.ProviderCode = devDbHotelService.ProviderCode;
                                            saasDbHotelRoom.isRefundable = devDbService.isNonRefundable.HasValue ? (!devDbService.isNonRefundable.Value) : false;
                                            if (devDbDoiser != null)
                                            {
                                                saasDbHotelRoom.ProviderSelectedOption = devDbDoiser.RemoteRoomId;
                                                saasDbHotelRoom.SubProviderCode = devDbDoiser.ContactName;
                                                saasDbHotelRoom.ConfirmationNumber = devDbDoiser.DoiserNo;
                                                saasDbHotelRoom.ConfirmedDate = devDbDoiser.ConfirmedDate;
                                            }
                                            saasDbHotelRoom.RoomPrice = 0;
                                            saasDb.ServiceHotelRoom2.Add(saasDbHotelRoom);
                                        }
                                        
                                    }

                                    if (devDbHotelService.Service_NumDoubleRooms.HasValue && devDbHotelService.Service_NumDoubleRooms > 0)
                                    {
                                        for (int roomCount = 0; roomCount < devDbHotelService.Service_NumDoubleRooms; roomCount++)
                                        {
                                            saasDbHotelRoom = new ServiceHotelRoom2();
                                            saasDbHotelRoom.RoomName = "Double";
                                            saasDbHotelRoom.HotelRoomTypeID = hotelRoomTypes.FirstOrDefault(x => x.Name == "Double").HotelRoomTypeID;
                                            saasDbHotelRoom.ServiceID = saasService.ServiceID;
                                            saasDbHotelRoom.ProviderCode = devDbHotelService.ProviderCode;
                                            saasDbHotelRoom.isRefundable = devDbService.isNonRefundable.HasValue ? (!devDbService.isNonRefundable.Value) : false;
                                            if (devDbDoiser != null)
                                            {
                                                saasDbHotelRoom.ProviderSelectedOption = devDbDoiser.RemoteRoomId;
                                                saasDbHotelRoom.SubProviderCode = devDbDoiser.ContactName;
                                                saasDbHotelRoom.ConfirmationNumber = devDbDoiser.DoiserNo;
                                                saasDbHotelRoom.ConfirmedDate = devDbDoiser.ConfirmedDate;
                                            }
                                            saasDbHotelRoom.RoomPrice = 0;
                                            saasDb.ServiceHotelRoom2.Add(saasDbHotelRoom);
                                        }
                                           
                                    }

                                    if (devDbHotelService.Service_NumTripleRooms.HasValue && devDbHotelService.Service_NumTripleRooms > 0)
                                    {
                                        for (int roomCount = 0; roomCount < devDbHotelService.Service_NumTripleRooms; roomCount++)
                                        {
                                            saasDbHotelRoom = new ServiceHotelRoom2();
                                            saasDbHotelRoom.RoomName = "Triple";
                                            saasDbHotelRoom.HotelRoomTypeID = hotelRoomTypes.FirstOrDefault(x => x.Name == "Triple").HotelRoomTypeID;
                                            saasDbHotelRoom.ServiceID = saasService.ServiceID;
                                            saasDbHotelRoom.ProviderCode = devDbHotelService.ProviderCode;
                                            saasDbHotelRoom.isRefundable = devDbService.isNonRefundable.HasValue ? (!devDbService.isNonRefundable.Value) : false;
                                            if (devDbDoiser != null)
                                            {
                                                saasDbHotelRoom.ProviderSelectedOption = devDbDoiser.RemoteRoomId;
                                                saasDbHotelRoom.SubProviderCode = devDbDoiser.ContactName;
                                                saasDbHotelRoom.ConfirmationNumber = devDbDoiser.DoiserNo;
                                                saasDbHotelRoom.ConfirmedDate = devDbDoiser.ConfirmedDate;
                                            }
                                            saasDbHotelRoom.RoomPrice = 0;
                                            saasDb.ServiceHotelRoom2.Add(saasDbHotelRoom);
                                        }
                                            
                                    }

                                    if (devDbHotelService.Service_NumQuadRooms.HasValue && devDbHotelService.Service_NumQuadRooms > 0)
                                    {
                                        for (int roomCount = 0; roomCount < devDbHotelService.Service_NumQuadRooms; roomCount++)
                                        {
                                            saasDbHotelRoom = new ServiceHotelRoom2();
                                            saasDbHotelRoom.RoomName = "Quad";
                                            saasDbHotelRoom.HotelRoomTypeID = hotelRoomTypes.FirstOrDefault(x => x.Name == "Quad").HotelRoomTypeID;
                                            saasDbHotelRoom.ServiceID = saasService.ServiceID;
                                            saasDbHotelRoom.ProviderCode = devDbHotelService.ProviderCode;
                                            saasDbHotelRoom.isRefundable = devDbService.isNonRefundable.HasValue ? (!devDbService.isNonRefundable.Value) : false;
                                            if (devDbDoiser != null)
                                            {
                                                saasDbHotelRoom.ProviderSelectedOption = devDbDoiser.RemoteRoomId;
                                                saasDbHotelRoom.SubProviderCode = devDbDoiser.ContactName;
                                                saasDbHotelRoom.ConfirmationNumber = devDbDoiser.DoiserNo;
                                                saasDbHotelRoom.ConfirmedDate = devDbDoiser.ConfirmedDate;
                                            }
                                            saasDbHotelRoom.RoomPrice = 0;
                                            saasDb.ServiceHotelRoom2.Add(saasDbHotelRoom);
                                        }
                                            
                                    }
                                    #endregion
                                }
                                else
                                {
                                    if (devDbHotelService.OnlineHotelID.HasValue)
                                    {
                                        var passengers = JsonConvert.DeserializeObject<Passengers>(devDbHotelService.Service_PassengerInfo);

                                        List<string> roomList = devDbHotelService.Room.Split(',').ToList();
                                        List<string> mealTypes = null;
                                        List<string> mealDescriptions = null;

                                        //int totalRoomCount = (devDbHotelService.Service_NumSingleRooms.HasValue ? devDbHotelService.Service_NumSingleRooms.Value : 0)
                                        //+ (devDbHotelService.Service_NumDoubleRooms.HasValue ? devDbHotelService.Service_NumDoubleRooms.Value : 0)
                                        //+ (devDbHotelService.Service_NumTripleRooms.HasValue ? devDbHotelService.Service_NumTripleRooms.Value : 0)
                                        //+ (devDbHotelService.Service_NumQuadRooms.HasValue ? devDbHotelService.Service_NumQuadRooms.Value : 0);

                                        if (!string.IsNullOrEmpty(devDbHotelService.Service_Board))
                                        {
                                            mealTypes = devDbHotelService.Service_Board.Split(',').ToList();
                                        }
                                        if (!string.IsNullOrEmpty(devDbHotelService.Meal))
                                        {
                                            mealDescriptions = devDbHotelService.Meal.Split(',').ToList();
                                        }

                                        for (int r = 0; r < passengers.Rooms.Count(); r++)
                                        {
                                            saasDbHotelRoom = new ServiceHotelRoom2();
                                            if (roomList.Count() == passengers.Rooms.Count())
                                            {
                                                saasDbHotelRoom.RoomName = roomList[r];

                                                if (mealTypes.Count == passengers.Rooms.Count())
                                                {
                                                    saasDbHotelRoom.MealShort = mealTypes[r];
                                                }
                                                if (mealDescriptions.Count == passengers.Rooms.Count())
                                                {
                                                    saasDbHotelRoom.Meal = mealDescriptions[r];
                                                }
                                            }
                                            else
                                            {
                                                switch (passengers.Rooms[r].Adult.Count())
                                                {
                                                    case 1:
                                                        saasDbHotelRoom.RoomName = "Single Room";
                                                        break;
                                                    case 2:
                                                        saasDbHotelRoom.RoomName = "Double Room";
                                                        break;
                                                    case 3:
                                                        saasDbHotelRoom.RoomName = "Triple Room";
                                                        break;
                                                    case 4:
                                                        saasDbHotelRoom.RoomName = "Single Room";
                                                        break;
                                                }
                                            }

                                            switch (passengers.Rooms[r].Adult.Count())
                                            {
                                                case 1:
                                                    saasDbHotelRoom.HotelRoomTypeID = 1;
                                                    break;
                                                case 2:
                                                    saasDbHotelRoom.HotelRoomTypeID = 2;
                                                    break;
                                                case 3:
                                                    saasDbHotelRoom.HotelRoomTypeID = 4;
                                                    break;
                                                case 4:
                                                    saasDbHotelRoom.HotelRoomTypeID = 5;
                                                    break;
                                            }

                                            saasDbHotelRoom.ServiceID = saasService.ServiceID;
                                            saasDbHotelRoom.ProviderCode = devDbHotelService.ProviderCode;
                                            saasDbHotelRoom.isRefundable = devDbService.isNonRefundable.HasValue ? (!devDbService.isNonRefundable.Value) : false;
                                            if (devDbDoiser != null)
                                            {
                                                saasDbHotelRoom.ProviderSelectedOption = devDbDoiser.RemoteRoomId;
                                                saasDbHotelRoom.SubProviderCode = devDbDoiser.ContactName;
                                                saasDbHotelRoom.ConfirmationNumber = devDbDoiser.DoiserNo;
                                                saasDbHotelRoom.ConfirmedDate = devDbDoiser.ConfirmedDate;
                                            }

                                            //saasDbHotelRoom.RoomPrice = roomTypeInfo.roomPrice;
                                            
                                            saasDb.ServiceHotelRoom2.Add(saasDbHotelRoom);



                                        }
                                    }




                                    //#region room types list
                                    //List<RoomTypeInfo> lstRoomTypeInfo = new List<RoomTypeInfo>();
                                    //lstRoomTypeInfo.Add(new RoomTypeInfo
                                    //{
                                    //    RoomTypeName = "Single",
                                    //    RoomTypeId = hotelRoomTypes.FirstOrDefault(x => x.Name == "Single").HotelRoomTypeID,
                                    //    roomPrice = (devDbHotelService.Service_NumSingleRooms.HasValue && devDbHotelService.Service_NumSingleRooms.Value > 0) ? devDbHotelService.SinglePrice / (devDbHotelService.Service_NumSingleRooms.Value) : 0,
                                    //    Count = devDbHotelService.Service_NumSingleRooms.HasValue ? devDbHotelService.Service_NumSingleRooms.Value : 0
                                    //});
                                    //lstRoomTypeInfo.Add(new RoomTypeInfo
                                    //{
                                    //    RoomTypeName = "Double",
                                    //    RoomTypeId = hotelRoomTypes.FirstOrDefault(x => x.Name == "Double").HotelRoomTypeID,
                                    //    roomPrice = (devDbHotelService.Service_NumDoubleRooms.HasValue && devDbHotelService.Service_NumDoubleRooms.Value > 0) ? devDbHotelService.DoublePrice / (devDbHotelService.Service_NumDoubleRooms.Value) : 0,
                                    //    Count = devDbHotelService.Service_NumDoubleRooms.HasValue ? devDbHotelService.Service_NumDoubleRooms.Value : 0
                                    //});

                                    //lstRoomTypeInfo.Add(new RoomTypeInfo
                                    //{
                                    //    RoomTypeName = "Twin",
                                    //    RoomTypeId = hotelRoomTypes.FirstOrDefault(x => x.Name == "Twin").HotelRoomTypeID,
                                    //    roomPrice = (devDbHotelService.TwinPrice > 0 && devDbHotelService.Service_NumDoubleRooms > 0) ? devDbHotelService.TwinPrice / (devDbHotelService.Service_NumDoubleRooms.Value) : 0,
                                    //    Count = devDbHotelService.Service_NumDoubleBedRooms.HasValue ? devDbHotelService.Service_NumDoubleBedRooms.Value : 0
                                    //});

                                    //lstRoomTypeInfo.Add(new RoomTypeInfo
                                    //{
                                    //    RoomTypeName = "Triple",
                                    //    RoomTypeId = hotelRoomTypes.FirstOrDefault(x => x.Name == "Triple").HotelRoomTypeID,
                                    //    roomPrice = (devDbHotelService.Service_NumTripleRooms.HasValue && devDbHotelService.Service_NumTripleRooms.Value > 0) ? devDbHotelService.TriplePrice / (devDbHotelService.Service_NumTripleRooms.Value) : 0,
                                    //    Count = devDbHotelService.Service_NumTripleRooms.HasValue ? devDbHotelService.Service_NumTripleRooms.Value : 0
                                    //});

                                    //lstRoomTypeInfo.Add(new RoomTypeInfo
                                    //{
                                    //    RoomTypeName = "Quad",
                                    //    RoomTypeId = hotelRoomTypes.FirstOrDefault(x => x.Name == "Quad").HotelRoomTypeID,
                                    //    roomPrice = (devDbHotelService.Service_NumQuadRooms.HasValue && devDbHotelService.Service_NumQuadRooms.Value > 0) ? (devDbHotelService.QuadPrice.HasValue ? devDbHotelService.QuadPrice.Value : 0) / (devDbHotelService.Service_NumQuadRooms.Value) : 0,
                                    //    Count = devDbHotelService.Service_NumQuadRooms.HasValue ? devDbHotelService.Service_NumQuadRooms.Value : 0
                                    //});


                                    //#endregion
                                    //List<string> roomList = devDbHotelService.Room.Split(',').ToList();
                                    //string roomName;
                                    //bool doesMealExist = !string.IsNullOrEmpty(devDbHotelService.Service_Board);
                                    //List<string> mealTypes = null;
                                    //bool doesMealDescExist = !string.IsNullOrEmpty(devDbHotelService.Meal);
                                    //List<string> mealDescriptions = null;
                                    //int j = 0;
                                    //if (doesMealExist)
                                    //{
                                    //    mealTypes = devDbHotelService.Service_Board.Split(',').ToList();
                                    //}
                                    //if (doesMealDescExist)
                                    //{
                                    //    mealDescriptions = devDbHotelService.Meal.Split(',').ToList();
                                    //}
                                    //int totalRoomCount = (devDbHotelService.Service_NumSingleRooms.HasValue ? devDbHotelService.Service_NumSingleRooms.Value : 0)
                                    //    + (devDbHotelService.Service_NumDoubleRooms.HasValue ? devDbHotelService.Service_NumDoubleRooms.Value : 0)
                                    //    + (devDbHotelService.Service_NumTripleRooms.HasValue ? devDbHotelService.Service_NumTripleRooms.Value : 0)
                                    //    + (devDbHotelService.Service_NumQuadRooms.HasValue ? devDbHotelService.Service_NumQuadRooms.Value : 0);
                                    //for (j = 0; j < roomList.Count; j++)
                                    //{
                                    //    if (j == totalRoomCount)
                                    //    {
                                    //        break;
                                    //    }
                                    //    roomName = roomList[j];
                                    //    saasDbHotelRoom = new ServiceHotelRoom2();
                                    //    saasDbHotelRoom.RoomName = roomName;
                                    //    saasDbHotelRoom.ServiceID = saasService.ServiceID;
                                    //    saasDbHotelRoom.ProviderCode = devDbHotelService.ProviderCode;
                                    //    saasDbHotelRoom.isRefundable = devDbService.isNonRefundable.HasValue ? (!devDbService.isNonRefundable.Value) : false;
                                    //    if (devDbDoiser != null)
                                    //    {
                                    //        saasDbHotelRoom.ProviderSelectedOption = devDbDoiser.RemoteRoomId;
                                    //        saasDbHotelRoom.SubProviderCode = devDbDoiser.ContactName;
                                    //        saasDbHotelRoom.ConfirmationNumber = devDbDoiser.DoiserNo;
                                    //        saasDbHotelRoom.ConfirmedDate = devDbDoiser.ConfirmedDate;
                                    //    }
                                    //    RoomTypeInfo roomTypeInfo = null;
                                    //    if (roomName.ToLower().Contains("single"))
                                    //    {
                                    //        roomTypeInfo = lstRoomTypeInfo.FirstOrDefault(x => x.RoomTypeName == "Single");

                                    //    }
                                    //    else if (roomName.ToLower().Contains("double") || roomName.ToLower().Contains("twin"))
                                    //    {
                                    //        roomTypeInfo = lstRoomTypeInfo.FirstOrDefault(x => x.RoomTypeName == "Double");
                                    //    }
                                    //    else if (roomName.ToLower().Contains("triple"))
                                    //    {
                                    //        roomTypeInfo = lstRoomTypeInfo.FirstOrDefault(x => x.RoomTypeName == "Triple");
                                    //    }
                                    //    else if (roomName.ToLower().Contains("quad"))
                                    //    {
                                    //        roomTypeInfo = lstRoomTypeInfo.FirstOrDefault(x => x.RoomTypeName == "Quad");
                                    //    }
                                    //    else
                                    //    {
                                    //        roomTypeInfo = lstRoomTypeInfo.FirstOrDefault(x => x.Count > 0);
                                    //    }
                                    //    if (roomTypeInfo.Count == 0)
                                    //    {
                                    //        continue;
                                    //    }
                                    //    roomTypeInfo.Count--;
                                    //    saasDbHotelRoom.HotelRoomTypeID = roomTypeInfo.RoomTypeId;
                                    //    saasDbHotelRoom.RoomPrice = roomTypeInfo.roomPrice;
                                    //    if (doesMealExist && j < mealTypes.Count)
                                    //    {
                                    //        saasDbHotelRoom.MealShort = mealTypes[j];
                                    //    }
                                    //    if (doesMealDescExist && j < mealDescriptions.Count)
                                    //    {
                                    //        saasDbHotelRoom.Meal = mealDescriptions[j];
                                    //    }
                                    //    saasDb.ServiceHotelRoom2.Add(saasDbHotelRoom);
                                    //}

                                }
                            }
                            else if (devDbHotelService.Tour_Item.StartsWith("Addit") && devDbHotelService.Service_Type == "Hotel")
                            {
                                saasDbHotelRoom = new ServiceHotelRoom2();
                                saasDbHotelRoom.ServiceID = saasService.ServiceID;
                                saasDbHotelRoom.RoomName = "Additional Service Room";
                                saasDbHotelRoom.Meal = devDbHotelService.Meal;
                                saasDbHotelRoom.HotelRoomTypeID = hotelRoomTypes.FirstOrDefault(x => x.Name == "Other").HotelRoomTypeID;
                                saasDbHotelRoom.MealShort = devDbHotelService.Service_Board;
                                saasDbHotelRoom.RoomPrice = devDbHotelService.ServicePrice != null ? (decimal)devDbHotelService.ServicePrice : 0;
                                saasDbHotelRoom.ProviderCode = devDbHotelService.ProviderCode;
                                saasDbHotelRoom.isRefundable = devDbService.isNonRefundable.HasValue ? (!devDbService.isNonRefundable.Value) : false;
                                saasDb.ServiceHotelRoom2.Add(saasDbHotelRoom);
                            }
                            else
                            {
                                
                            }
                        }


                        saasDb.Service2.Add(saasService);
                        //Console.WriteLine($"Processing record {i}");
                        //if (i % 10 == 0  && i != 0)
                        //{
                        //    //string a = "";
                        //    saasDb.SaveChanges();
                        //}
                    }
                    //for loop has continue so save here for the last batch
                    saasDb.SaveChanges();
                }

               
                
            }
        }


        public static void CreateHotelRoomForToursandCruises()  // it merged with MigrateServiceTables
        {
            using (KeyConNew saasDb = new KeyConNew())
            {
                var Service_OldCount = saasDb.Service_Old.Where(s => s.Tour_Item == "Tours and Cruises" && s.Service_Type != null 
                && s.Service_IsRowDeleted == false && s.Service_IsRowDeleted != null && s.Service_ID < 231443).Count();

                int iterationCount = Service_OldCount / 500;
                iterationCount++;

                var saasDbStatusTypes = saasDb.ServiceStatusTypes.ToList();
                var serviceTypes = saasDb.ServiceTypes.ToList();
                var hotelRoomTypes = saasDb.HotelRoomTypes.ToList();

                for (int iteration = 0; iteration < iterationCount; iteration++)
                {
                    Console.WriteLine("iteration " + iteration);

                    var saasDbServices = saasDb.Service_Old.Where(s => s.Tour_Item == "Tours and Cruises" && s.Service_Type != null 
                    && s.Service_IsRowDeleted == false && s.Service_IsRowDeleted != null && s.Service_ID < 231443)
                    .OrderByDescending(x => x.Service_ID)/*.Skip(iteration * 500).Take(500)*/.ToList();

                    foreach (var saasDBService in saasDbServices)
                    {
                        Console.WriteLine("ServiceID: " + saasDBService.Service_ID);

                        for (int i = 1; i <= saasDBService.Service_NumSingleRooms; i++)
                        {
                            var singleRoom = hotelRoomTypes.Where(h => h.HotelRoomTypeID == 1).FirstOrDefault();
                            ServiceHotelRoom2 hotelRoom = new ServiceHotelRoom2() { ServiceID = saasDBService.Service_ID, isRefundable = true };
                            hotelRoom.RoomName = singleRoom.Name + " Room";
                            hotelRoom.HotelRoomTypeID = singleRoom.HotelRoomTypeID;
                            hotelRoom.RoomPrice = saasDBService.SinglePrice;
                            hotelRoom.RoomPriceNet = 0; // RoomPriceNet cant get from any fields // yakup - atilla

                            saasDb.ServiceHotelRoom2.Add(hotelRoom);
                        }

                        for (int i = 1; i <= saasDBService.Service_NumDoubleRooms; i++)
                        {
                            var doubleRoom = hotelRoomTypes.Where(h => h.HotelRoomTypeID == 2).FirstOrDefault();
                            ServiceHotelRoom2 hotelRoom = new ServiceHotelRoom2() { ServiceID = saasDBService.Service_ID, isRefundable = true };
                            hotelRoom.RoomName = doubleRoom.Name + " Room";
                            hotelRoom.HotelRoomTypeID = doubleRoom.HotelRoomTypeID;
                            hotelRoom.RoomPrice = saasDBService.DoublePrice;
                            hotelRoom.RoomPriceNet = 0; // RoomPriceNet cant get from any fields // yakup - atilla

                            saasDb.ServiceHotelRoom2.Add(hotelRoom);
                        }

                        for (int i = 1; i <= saasDBService.Service_NumTripleRooms; i++)
                        {
                            var tripleRoom = hotelRoomTypes.Where(h => h.HotelRoomTypeID == 4).FirstOrDefault();
                            ServiceHotelRoom2 hotelRoom = new ServiceHotelRoom2() { ServiceID = saasDBService.Service_ID, isRefundable = true };
                            hotelRoom.RoomName = tripleRoom.Name + " Room";
                            hotelRoom.HotelRoomTypeID = tripleRoom.HotelRoomTypeID;
                            hotelRoom.RoomPrice = saasDBService.TriplePrice;
                            hotelRoom.RoomPriceNet = 0; // RoomPriceNet cant get from any fields // yakup - atilla

                            saasDb.ServiceHotelRoom2.Add(hotelRoom);
                        }

                        for (int i = 1; i <= saasDBService.Service_NumQuadRooms; i++)
                        {
                            var quadRoom = hotelRoomTypes.Where(h => h.HotelRoomTypeID == 5).FirstOrDefault();
                            ServiceHotelRoom2 hotelRoom = new ServiceHotelRoom2() { ServiceID = saasDBService.Service_ID, isRefundable = true };
                            hotelRoom.RoomName = quadRoom.Name + " Room";
                            hotelRoom.HotelRoomTypeID = quadRoom.HotelRoomTypeID;
                            hotelRoom.RoomPrice = saasDBService.QuadPrice ?? 0;
                            hotelRoom.RoomPriceNet = 0; // RoomPriceNet cant get from any fields // yakup - atilla

                            saasDb.ServiceHotelRoom2.Add(hotelRoom);
                        }
                    }
                    saasDb.SaveChanges();
                    

                }

            }
        }

        public class RoomTypeInfo
        {
            public int RoomTypeId { get; set; }
            public int Count { get; set; }
            public decimal roomPrice { get; set; }
            public string RoomTypeName { get; set; }
        }
    }
}
